<script>

// * Creates a new marker and adds it to a group
// * @param {H.map.Group} group       The group holding the new marker
// * @param {H.geo.Point} coordinate  The location of the marker
// * @param {String} html             Data associated with the marker

function addMarkerToGroup(group, coordinate, html) {
  var marker = new H.map.Marker(coordinate);
  // add custom data to the marker
  marker.setData(html);
  group.addObject(marker);

}


// Clicking on a marker opens an infobubble which holds HTML content related to the marker.
// @param  {H.Map} map      A HERE Map instance within the application
function addInfoBubble(map) {
  var group = new H.map.Group();

  map.addObject(group);

  // add 'tap' event listener, that opens info bubble, to the group
  group.addEventListener('tap', function (evt) {
    // event target is the marker itself, group is a parent event target
    // for all objects that it contains
    var bubble =  new H.ui.InfoBubble(evt.target.getPosition(), {
      // read custom data
      content: evt.target.getData()
    });
    // show info bubble
    ui.addBubble(bubble);
  }, false);

    addMarkerToGroup(group, coordinates, html);

  };


// Place all the behaviors and hooks related to the matching controller here.
// All this logic will automatically be available in application.js.
(function () {
'use strict';

var app_id = "qOZLRAqisXS2lkh5Qa1x";
var app_code = "A4O8jBu38pcEi5vsqwr9vA";
var host = "https://datalens.api.here.com";
var queries = {"query":{"fileName":"query.json","dataset":"incidents_with_coords.csv","id":"02ee643a5dce451a9a6fea86684fd546"}};

const {query} = queries;

//initialize communication with the platform
// July 16 - changed useCIT to true
const platform = new H.service.Platform({
    app_id,
    app_code,
    useCIT: true,
    useHTTPS: true
});

//initialize a map
const pixelRatio = devicePixelRatio > 1 ? 2 : 1;
const defaultLayers = platform.createDefaultLayers({tileSize: 256 * pixelRatio});
const map = new H.Map(
    document.getElementsByClassName('dl-map')[0],
    defaultLayers.normal.basenight,
    {pixelRatio}
);

window.addEventListener('resize', function() {
    map.getViewPort().resize();
});

//make the map interactive
new H.mapevents.Behavior(new H.mapevents.MapEvents(map));
const ui = H.ui.UI.createDefault(map, defaultLayers);

//instantiate Geo-visualization service
const service = platform.configure(new H.datalens.Service());

//set map position
map.setCenter(new H.geo.Point(40.018338, -98.060158));
map.setZoom(4, false);

let provider = new H.datalens.QueryTileProvider(
    service,
    {
        queryId: query.id,
        tileParamNames: {x: 'x', y: 'y', z: 'z'},
        queryParams: {
            cluster_size: 128
        }
    }
);

let countScale = d3.scaleLinear()
    .domain([0, 100])
    .range([25, 55])
    .clamp(true);

let layer = new H.datalens.ObjectLayer(
    provider,
    {
        rowToMapObject: function(row) {
            return new H.map.Marker(
                {lat: row.latitude, lng: row.longitude}
            );
        },
        rowToStyle: function(row) {
            let size = countScale(row.count) * pixelRatio;
            //Icon takes path and fit it icon size
            let icon = H.datalens.ObjectLayer.createIcon([
                'svg',
                {
                    viewBox: [-size, -size, size * 2, size * 2]
                },
                ['path', {
                    d: d3.arc()({ //fill
                        startAngle: 0,
                        endAngle: 360,
                        outerRadius: size
                    }),
                    fill: '#0092b3',
                    fillOpacity: 0.8
                }],
                ['text', {
                    x: 0,
                    y: 10 * pixelRatio,
                    fontFamily: 'sans-serif',
                    fontWeight: 100,
                    fontSize: 22 * pixelRatio,
                    textAnchor: 'middle',
                    fill: 'white'
                },
                String(row.count)]
            ], {size: size});
            return {icon: icon};
        }
    }
);

//add layer on map
map.addLayer(layer);
addInfoBubble(map);
}());
// Group markers and add info bubbles

</script>
